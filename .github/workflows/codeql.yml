name: GHAS with HTML Report

on:
  workflow_dispatch:

jobs:
  scan-codeql:
    name: CodeQL Analysis (${{ matrix.language }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        language: [typescript, javascript, html, scss, solidity, pug]
    outputs:
      lang: ${{ matrix.language }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Try Initialize CodeQL
        continue-on-error: true
        id: init
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Autobuild
        if: steps.init.outcome == 'success'
        uses: github/codeql-action/autobuild@v3

      - name: Perform CodeQL Analysis
        if: steps.init.outcome == 'success'
        uses: github/codeql-action/analyze@v3
        with:
          output: sarif-results
          category: '/language:${{ matrix.language }}'

      - name: Generate fallback JSON if CodeQL failed
        if: steps.init.outcome != 'success'
        run: |
          mkdir -p combined-json
          echo "{\"language\": \"${{ matrix.language }}\", \"fileCount\": 0, \"lineCount\": 0, \"issues\": [], \"supported\": false}" > combined-json/${{ matrix.language }}.json

      - name: Convert SARIF to JSON
        if: steps.init.outcome == 'success'
        run: |
          mkdir -p combined-json
          SARIF=$(find sarif-results -name "*.sarif" | head -n 1)
          FILE_COUNT=$(find . -type f -name "*.${{ matrix.language }}" | wc -l || echo 0)
          LINE_COUNT=$(find . -type f -name "*.${{ matrix.language }}" -exec cat {} + | wc -l || echo 0)
          jq --arg lang "${{ matrix.language }}" \
             --argjson fileCount $FILE_COUNT \
             --argjson lineCount $LINE_COUNT \
             'def safe(f): if f then f else "N/A"; {
               language: $lang,
               fileCount: $fileCount,
               lineCount: $lineCount,
               supported: true,
               issues: [.runs[].results[]? | {
                 ruleId,
                 message: .message.text,
                 file: .locations[0].physicalLocation.artifactLocation.uri,
                 line: .locations[0].physicalLocation.region.startLine,
                 snippet: (.locations[0].physicalLocation.region.snippet.text // "N/A"),
                 explanation: (.partialFingerprints.explanation // "N/A"),
                 remediation: (.partialFingerprints.remediation // "N/A")
               }]
             }' "$SARIF" > combined-json/${{ matrix.language }}.json

      - name: Upload Language JSON
        uses: actions/upload-artifact@v4
        with:
          name: lang-${{ matrix.language }}
          path: combined-json/${{ matrix.language }}.json

  combine-json:
    name: Combine All JSONs
    runs-on: ubuntu-latest
    needs: scan-codeql

    steps:
      - name: Download all language JSONs
        uses: actions/download-artifact@v4
        with:
          path: combined

      - name: Combine into single JSON
        run: |
          mkdir -p report
          jq -s '.' combined/lang-*/*.json > report/final-ghas.json

      - name: Upload Final JSON
        uses: actions/upload-artifact@v4
        with:
          name: combined-ghas-json
          path: report/final-ghas.json

  generate-html:
    name: Generate HTML Report
    runs-on: ubuntu-latest
    needs: combine-json

    steps:
      - name: Download Final JSON
        uses: actions/download-artifact@v4
        with:
          name: combined-ghas-json
          path: .

      - name: Generate HTML
        run: |
          JSON="final-ghas.json"
          HTML="ghas-report.html"

          {
            echo "<!DOCTYPE html><html><head><meta charset='UTF-8'><title>GHAS Combined Report</title>"
            echo "<style>
              body { font-family: Arial; padding: 20px; }
              h1, h2, h3 { color: #2c3e50; }
              pre { background: #f4f4f4; padding: 10px; border: 1px solid #ccc; white-space: pre-wrap; }
              .issue { border: 1px solid #ddd; padding: 10px; margin: 10px 0; border-radius: 5px; }
            </style></head><body>"

            echo "<h1>üîç GHAS Consolidated Report</h1>"

            SUPPORTED=""
            UNSUPPORTED=""

            jq -c '.[]' "$JSON" | while read -r entry; do
              lang=$(echo "$entry" | jq -r '.language')
              fcount=$(echo "$entry" | jq -r '.fileCount')
              lcount=$(echo "$entry" | jq -r '.lineCount')
              supported=$(echo "$entry" | jq -r '.supported')
              icount=$(echo "$entry" | jq -r '.issues | length')

              echo "<h2>üìÅ Language: <code>$lang</code></h2>"
              echo "<ul><li><strong>Source Files:</strong> $fcount</li>"
              echo "<li><strong>Total Lines:</strong> $lcount</li>"
              echo "<li><strong>Total Issues:</strong> $icount</li></ul>"

              if [ "$supported" = "true" ]; then
                SUPPORTED+="$lang ($icount), "
              else
                UNSUPPORTED+="$lang (Not Supported), "
              fi

              if [ "$supported" = "true" ] && [ "$icount" -gt 0 ]; then
                echo "$entry" | jq -c '.issues[]' | while read -r issue; do
                  rule=$(echo "$issue" | jq -r '.ruleId')
                  msg=$(echo "$issue" | jq -r '.message')
                  file=$(echo "$issue" | jq -r '.file')
                  line=$(echo "$issue" | jq -r '.line')
                  code=$(echo "$issue" | jq -r '.snippet' | sed ':a;N;$!ba;s/\n/<br>/g')
                  explanation=$(echo "$issue" | jq -r '.explanation')
                  remediation=$(echo "$issue" | jq -r '.remediation')

                  echo "<div class='issue'>"
                  echo "<h3>üîπ Rule: $rule</h3>"
                  echo "<p><strong>File:</strong> $file:$line</p>"
                  echo "<p><strong>Finding:</strong> $msg</p>"
                  echo "<p><strong>Code Snippet:</strong></p><pre>${code}</pre>"
                  echo "<p><strong>Explanation:</strong> $explanation</p>"
                  echo "<p><strong>Remediation:</strong> $remediation</p>"
                  echo "</div>"
                done
              fi
            done

            echo "<h2>üßæ Summary</h2>"
            echo "<p><strong>Supported Languages:</strong> ${SUPPORTED%, }</p>"
            echo "<p><strong>Unsupported Languages:</strong> ${UNSUPPORTED%, }</p>"

            echo "</body></html>"
          } > $HTML

      - name: Upload HTML Report
        uses: actions/upload-artifact@v4
        with:
          name: GHAS-HTML-Report
          path: ghas-report.html
